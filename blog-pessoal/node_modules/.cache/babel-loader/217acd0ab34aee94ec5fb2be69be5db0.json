{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thatiane\\\\Desktop\\\\BlogPessoalFrontEnd\\\\blog-pessoal\\\\src\\\\components\\\\postagens\\\\cadastroPost\\\\CadastroPost.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Container, Typography, TextField, Button, Select, InputLabel, MenuItem, FormControl, FormHelperText } from \"@material-ui/core\";\nimport './CadastroPost.css';\nimport { useHistory, useParams } from 'react-router-dom';\nimport useLocalStorage from 'react-use-localstorage';\nimport { busca, buscaId, post, put } from '../../../services/Service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CadastroPost() {\n  _s();\n\n  let history = useHistory();\n  const {\n    id\n  } = useParams();\n  const [temas, setTemas] = useState([]);\n  const [token, setToken] = useLocalStorage('token');\n  useEffect(() => {\n    if (token == \"\") {\n      alert(\"VocÃª precisa estar logado\");\n      history.push(\"/login\");\n    }\n  }, [token]);\n  const [tema, setTema] = useState({\n    id: 0,\n    descricao: ''\n  });\n  const [postagem, setPostagem] = useState({\n    id: 0,\n    titulo: '',\n    texto: '',\n    tema: null\n  });\n  useEffect(() => {\n    setPostagem({ ...postagem,\n      tema: tema\n    });\n  }, [tema]);\n  useEffect(() => {\n    getTemas();\n\n    if (id !== undefined) {\n      findByIdPostagem(id);\n    }\n  }, [id]);\n\n  async function getTemas() {\n    await busca(\"/tema\", setTemas, {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n  async function findByIdPostagem(id) {\n    await buscaId(`postagens/${id}`, setPostagem, {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n  function updatedPostagem(e) {\n    setPostagem({ ...postagem,\n      [e.target.name]: e.target.value,\n      tema: tema\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (id !== undefined) {\n      put(`/postagens`, postagem, setPostagem, {\n        headers: {\n          'Authorization': token\n        }\n      });\n      alert('Postagem atualizada com sucesso');\n    } else {\n      post(`/postagens`, postagem, setPostagem, {\n        headers: {\n          'Authorization': token\n        }\n      });\n      alert('Postagem cadastrada com sucesso');\n    }\n\n    back();\n  }\n\n  function back() {\n    history.push('/posts');\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"topo\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        color: \"textSecondary\",\n        component: \"h1\",\n        align: \"center\",\n        children: \"Formul\\xE1rio de cadastro postagem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: postagem.titulo,\n        onChange: e => updatedPostagem(e),\n        id: \"titulo\",\n        label: \"titulo\",\n        variant: \"outlined\",\n        name: \"titulo\",\n        margin: \"normal\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: postagem.texto,\n        onChange: e => updatedPostagem(e),\n        id: \"texto\",\n        label: \"texto\",\n        name: \"texto\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"demo-simple-select-helper-label\",\n          children: \"Tema \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"demo-simple-select-helper-label\",\n          id: \"demo-simple-select-helper\",\n          onChange: e => buscaId(`/tema/${e.target.value}`, setTema, {\n            headers: {\n              'Authorization': token\n            }\n          }),\n          children: temas.map(tema => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: tema.id,\n            children: tema.descricao\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          children: \"Escolha um tema para a postagem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Finalizar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CadastroPost, \"C4C3PTn0YXL23ZellFbtoaX9fIs=\", false, function () {\n  return [useHistory, useParams, useLocalStorage];\n});\n\n_c = CadastroPost;\nexport default CadastroPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CadastroPost\");","map":{"version":3,"sources":["C:/Users/Thatiane/Desktop/BlogPessoalFrontEnd/blog-pessoal/src/components/postagens/cadastroPost/CadastroPost.tsx"],"names":["React","useEffect","useState","Container","Typography","TextField","Button","Select","InputLabel","MenuItem","FormControl","FormHelperText","useHistory","useParams","useLocalStorage","busca","buscaId","post","put","CadastroPost","history","id","temas","setTemas","token","setToken","alert","push","tema","setTema","descricao","postagem","setPostagem","titulo","texto","getTemas","undefined","findByIdPostagem","headers","updatedPostagem","e","target","name","value","onSubmit","preventDefault","back","map"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { Container, Typography, TextField, Button, Select, InputLabel, MenuItem, FormControl, FormHelperText } from \"@material-ui/core\"\r\nimport './CadastroPost.css';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Tema from '../../../models/Tema';\r\nimport useLocalStorage from 'react-use-localstorage';\r\nimport Postagem from '../../../models/Postagem';\r\nimport { busca, buscaId, post, put } from '../../../services/Service';\r\n\r\nfunction CadastroPost() {\r\n    let history = useHistory();\r\n    const { id } = useParams<{ id: string }>();\r\n    const [temas, setTemas] = useState<Tema[]>([])\r\n    const [token, setToken] = useLocalStorage('token');\r\n\r\n    useEffect(() => {\r\n        if (token == \"\") {\r\n            alert(\"VocÃª precisa estar logado\")\r\n            history.push(\"/login\")\r\n\r\n        }\r\n    }, [token])\r\n\r\n    const [tema, setTema] = useState<Tema>(\r\n        {\r\n            id: 0,\r\n            descricao: ''\r\n        })\r\n    const [postagem, setPostagem] = useState<Postagem>({\r\n        id: 0,\r\n        titulo: '',\r\n        texto: '',\r\n        tema: null\r\n    })\r\n\r\n    useEffect(() => { \r\n        setPostagem({\r\n            ...postagem,\r\n            tema: tema\r\n        })\r\n    }, [tema])\r\n\r\n    useEffect(() => {\r\n        getTemas()\r\n        if (id !== undefined) {\r\n            findByIdPostagem(id)\r\n        }\r\n    }, [id])\r\n\r\n    async function getTemas() {\r\n        await busca(\"/tema\", setTemas, {\r\n            headers: {\r\n                'Authorization': token\r\n            }\r\n        })\r\n    }\r\n\r\n    async function findByIdPostagem(id: string) {\r\n        await buscaId(`postagens/${id}`, setPostagem, {\r\n            headers: {\r\n                'Authorization': token\r\n            }\r\n        })\r\n    }\r\n\r\n    function updatedPostagem(e: ChangeEvent<HTMLInputElement>) {\r\n\r\n        setPostagem({\r\n            ...postagem,\r\n            [e.target.name]: e.target.value,\r\n            tema: tema\r\n        })\r\n\r\n    }\r\n\r\n    async function onSubmit(e: ChangeEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        if (id !== undefined) {\r\n            put(`/postagens`, postagem, setPostagem, {\r\n                headers: {\r\n                    'Authorization': token\r\n                }\r\n            })\r\n            alert('Postagem atualizada com sucesso');\r\n        } else {\r\n            post(`/postagens`, postagem, setPostagem, {\r\n                headers: {\r\n                    'Authorization': token\r\n                }\r\n            })\r\n            alert('Postagem cadastrada com sucesso');\r\n        }\r\n        back()\r\n\r\n    }\r\n\r\n    function back() {\r\n        history.push('/posts')\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className=\"topo\">\r\n            <form onSubmit={onSubmit}>\r\n                <Typography variant=\"h3\" color=\"textSecondary\" component=\"h1\" align=\"center\" >FormulÃ¡rio de cadastro postagem</Typography>\r\n                <TextField value={postagem.titulo} onChange={(e: ChangeEvent<HTMLInputElement>) => updatedPostagem(e)} id=\"titulo\" label=\"titulo\" variant=\"outlined\" name=\"titulo\" margin=\"normal\" fullWidth />\r\n                <TextField value={postagem.texto} onChange={(e: ChangeEvent<HTMLInputElement>) => updatedPostagem(e)} id=\"texto\" label=\"texto\" name=\"texto\" variant=\"outlined\" margin=\"normal\" fullWidth />\r\n\r\n                <FormControl >\r\n                    <InputLabel id=\"demo-simple-select-helper-label\">Tema </InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-helper-label\"\r\n                        id=\"demo-simple-select-helper\"\r\n                        onChange={(e) => buscaId(`/tema/${e.target.value}`, setTema, {\r\n                            headers: {\r\n                                'Authorization': token\r\n                            }\r\n                        })}>\r\n                        {\r\n                            temas.map(tema => (\r\n                                <MenuItem value={tema.id}>{tema.descricao}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                    <FormHelperText>Escolha um tema para a postagem</FormHelperText>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                        Finalizar\r\n                    </Button>\r\n                </FormControl>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\nexport default CadastroPost;"]},"metadata":{},"sourceType":"module"}