{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thatiane\\\\Desktop\\\\BlogPessoalFrontEnd\\\\blog-pessoal\\\\src\\\\components\\\\postagens\\\\cadastroPost\\\\CadastroPost.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Container, Typography, TextField, Button, Select, InputLabel, MenuItem, FormControl, FormHelperText } from \"@material-ui/core\";\nimport './CadastroPost.css';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { busca, buscaId, post, put } from '../../../services/Service';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CadastroPost() {\n  _s();\n\n  let history = useHistory();\n  const {\n    id\n  } = useParams();\n  const [temas, setTemas] = useState([]);\n  const token = useSelector(state => state.tokens);\n  useEffect(() => {\n    if (token == \"\") {\n      toast.error('Você precisa estar logado!', {\n        position: 'top-right',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        //se colocar o mouse em cima, segurar o alerta\n        draggable: false,\n        //mover a notificação de local\n        theme: 'colored',\n        //como o alerta deve ser exibido  \n        progress: undefined\n      });\n      history.push(\"/login\");\n    }\n  }, [token]);\n  const [tema, setTema] = useState({\n    id: 0,\n    descricao: ''\n  });\n  const [postagem, setPostagem] = useState({\n    id: 0,\n    titulo: '',\n    texto: '',\n    tema: null\n  });\n  useEffect(() => {\n    setPostagem({ ...postagem,\n      tema: tema\n    });\n  }, [tema]);\n  useEffect(() => {\n    getTemas();\n\n    if (id !== undefined) {\n      findByIdPostagem(id);\n    }\n  }, [id]);\n\n  async function getTemas() {\n    await busca(\"/temas\", setTemas, {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n  async function findByIdPostagem(id) {\n    await buscaId(`postagens/${id}`, setPostagem, {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n  function updatedPostagem(e) {\n    setPostagem({ ...postagem,\n      [e.target.name]: e.target.value,\n      tema: tema\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (id !== undefined) {\n      put(`/postagens`, postagem, setPostagem, {\n        headers: {\n          'Authorization': token\n        }\n      });\n      toast.success('Postagem atualizada com sucesso', {\n        position: 'top-right',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        //se colocar o mouse em cima, segurar o alerta\n        draggable: false,\n        //mover a notificação de local\n        theme: 'colored',\n        //como o alerta deve ser exibido  \n        progress: undefined\n      });\n    } else {\n      post(`/postagens`, postagem, setPostagem, {\n        headers: {\n          'Authorization': token\n        }\n      });\n      toast.success('Postagem cadastrada com sucesso', {\n        position: 'top-right',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        //se colocar o mouse em cima, segurar o alerta\n        draggable: false,\n        //mover a notificação de local\n        theme: 'colored',\n        //como o alerta deve ser exibido  \n        progress: undefined\n      });\n    }\n\n    back();\n  }\n\n  function back() {\n    history.push('/postagens');\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"topo\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        color: \"textSecondary\",\n        component: \"h1\",\n        align: \"center\",\n        children: \"Formul\\xE1rio de cadastro postagem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: postagem.titulo,\n        onChange: e => updatedPostagem(e),\n        id: \"titulo\",\n        label: \"titulo\",\n        variant: \"outlined\",\n        name: \"titulo\",\n        margin: \"normal\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: postagem.texto,\n        onChange: e => updatedPostagem(e),\n        id: \"texto\",\n        label: \"texto\",\n        name: \"texto\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"demo-simple-select-helper-label\",\n          children: \"Tema \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"demo-simple-select-helper-label\",\n          id: \"demo-simple-select-helper\",\n          onChange: e => buscaId(`/tema/${e.target.value}`, setTema, {\n            headers: {\n              'Authorization': token\n            }\n          }),\n          children: temas.map(tema => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: tema.id,\n            children: tema.descricao\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          children: \"Escolha um tema para a postagem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Finalizar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CadastroPost, \"4pHgozX17S7u7iP0kysVlUEWy8M=\", false, function () {\n  return [useHistory, useParams, useSelector];\n});\n\n_c = CadastroPost;\nexport default CadastroPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CadastroPost\");","map":{"version":3,"sources":["C:/Users/Thatiane/Desktop/BlogPessoalFrontEnd/blog-pessoal/src/components/postagens/cadastroPost/CadastroPost.tsx"],"names":["React","useEffect","useState","Container","Typography","TextField","Button","Select","InputLabel","MenuItem","FormControl","FormHelperText","useHistory","useParams","busca","buscaId","post","put","toast","useSelector","CadastroPost","history","id","temas","setTemas","token","state","tokens","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","progress","undefined","push","tema","setTema","descricao","postagem","setPostagem","titulo","texto","getTemas","findByIdPostagem","headers","updatedPostagem","e","target","name","value","onSubmit","preventDefault","success","back","map"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { Container, Typography, TextField, Button, Select, InputLabel, MenuItem, FormControl, FormHelperText } from \"@material-ui/core\"\r\nimport './CadastroPost.css';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Tema from '../../../models/Temas';\r\nimport Postagem from '../../../models/Postagens';\r\nimport { busca, buscaId, post, put } from '../../../services/Service';\r\nimport {toast} from 'react-toastify';\r\nimport { useSelector } from 'react-redux';\r\nimport { TokenState } from '../../../store/tokens/tokensReducer';\r\nimport Temas from '../../../models/Temas';\r\nimport Postagens from '../../../models/Postagens';\r\n\r\n\r\nfunction CadastroPost() {\r\n    let history = useHistory();\r\n    const { id } = useParams<{ id: string }>();\r\n    const [temas, setTemas] = useState<Temas[]>([])\r\n    const token = useSelector<TokenState, TokenState[\"tokens\"]>(\r\n        (state)=> state.tokens\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (token == \"\") {\r\n            toast.error('Você precisa estar logado!', {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true, //se colocar o mouse em cima, segurar o alerta\r\n                draggable: false, //mover a notificação de local\r\n                theme: 'colored', //como o alerta deve ser exibido  \r\n                progress: undefined,\r\n            });\r\n            history.push(\"/login\")\r\n\r\n        }\r\n    }, [token])\r\n\r\n    const [tema, setTema] = useState<Temas>(\r\n        {\r\n            id: 0,\r\n            descricao: ''\r\n        })\r\n    const [postagem, setPostagem] = useState<Postagens>({\r\n        id: 0,\r\n        titulo: '',\r\n        texto: '',\r\n        tema: null\r\n    })\r\n\r\n    useEffect(() => { \r\n        setPostagem({\r\n            ...postagem,\r\n            tema: tema\r\n        })\r\n    }, [tema])\r\n\r\n    useEffect(() => {\r\n        getTemas()\r\n        if (id !== undefined) {\r\n            findByIdPostagem(id)\r\n        }\r\n    }, [id])\r\n\r\n    async function getTemas() {\r\n        await busca(\"/temas\", setTemas, {\r\n            headers: {\r\n                'Authorization': token\r\n            }\r\n        })\r\n    }\r\n\r\n    async function findByIdPostagem(id: string) {\r\n        await buscaId(`postagens/${id}`, setPostagem, {\r\n            headers: {\r\n                'Authorization': token\r\n            }\r\n        })\r\n    }\r\n\r\n    function updatedPostagem(e: ChangeEvent<HTMLInputElement>) {\r\n\r\n        setPostagem({\r\n            ...postagem,\r\n            [e.target.name]: e.target.value,\r\n            tema: tema\r\n        })\r\n\r\n    }\r\n\r\n    async function onSubmit(e: ChangeEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        if (id !== undefined) {\r\n            put(`/postagens`, postagem, setPostagem, {\r\n                headers: {\r\n                    'Authorization': token\r\n                }\r\n            })\r\n            toast.success('Postagem atualizada com sucesso', {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true, //se colocar o mouse em cima, segurar o alerta\r\n                draggable: false, //mover a notificação de local\r\n                theme: 'colored', //como o alerta deve ser exibido  \r\n                progress: undefined,\r\n            });\r\n        } else {\r\n            post(`/postagens`, postagem, setPostagem, {\r\n                headers: {\r\n                    'Authorization': token\r\n                }\r\n            })\r\n            toast.success('Postagem cadastrada com sucesso', {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true, //se colocar o mouse em cima, segurar o alerta\r\n                draggable: false, //mover a notificação de local\r\n                theme: 'colored', //como o alerta deve ser exibido  \r\n                progress: undefined,\r\n            });\r\n        }\r\n        back()\r\n\r\n    }\r\n\r\n    function back() {\r\n        history.push('/postagens')\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className=\"topo\">\r\n            <form onSubmit={onSubmit}>\r\n                <Typography variant=\"h3\" color=\"textSecondary\" component=\"h1\" align=\"center\" >Formulário de cadastro postagem</Typography>\r\n                <TextField value={postagem.titulo} onChange={(e: ChangeEvent<HTMLInputElement>) => updatedPostagem(e)} id=\"titulo\" label=\"titulo\" variant=\"outlined\" name=\"titulo\" margin=\"normal\" fullWidth />\r\n                <TextField value={postagem.texto} onChange={(e: ChangeEvent<HTMLInputElement>) => updatedPostagem(e)} id=\"texto\" label=\"texto\" name=\"texto\" variant=\"outlined\" margin=\"normal\" fullWidth />\r\n                \r\n\r\n                <FormControl >\r\n                    <InputLabel id=\"demo-simple-select-helper-label\">Tema </InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-helper-label\"\r\n                        id=\"demo-simple-select-helper\"\r\n                        onChange={(e) => buscaId(`/tema/${e.target.value}`, setTema, {\r\n                            headers: {\r\n                                'Authorization': token\r\n                            }\r\n                        })}>\r\n                        {\r\n                            temas.map(tema => (\r\n                                <MenuItem value={tema.id}>{tema.descricao}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                    <FormHelperText>Escolha um tema para a postagem</FormHelperText>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                        Finalizar\r\n                    </Button>\r\n                </FormControl>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\nexport default CadastroPost;\r\n"]},"metadata":{},"sourceType":"module"}